use trit::Trit;
use registers::*;
use opcodes;
use opcodes::Opcode;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
enum Instruction {
    And(StandardRegister, StandardRegister, StandardRegister),
    Or(StandardRegister, StandardRegister, StandardRegister),
    Tmul(StandardRegister, StandardRegister, StandardRegister),
    Tcmp(StandardRegister, StandardRegister, StandardRegister),
    Cmp(StandardRegister, StandardRegister, StandardRegister),
    Shf(StandardRegister, StandardRegister, StandardRegister),
    Add(StandardRegister, StandardRegister, StandardRegister),
    Mul(StandardRegister, StandardRegister),
    Div(StandardRegister, StandardRegister),
    Andi(StandardRegister, StandardRegister, i32),
    Ori(StandardRegister, StandardRegister, i32),
    Tmuli(StandardRegister, StandardRegister, i32),
    Tcmpi(StandardRegister, StandardRegister, i32),
    Shfi(StandardRegister, StandardRegister, i32),
    Addi(StandardRegister, StandardRegister, i32),
    Lui(StandardRegister, i32),
    Lsr(StandardRegister, SystemRegister),
    Ssr(SystemRegister, StandardRegister),
    Lt(StandardRegister, StandardRegister, i32),
    Lh(StandardRegister, StandardRegister, i32),
    Lw(StandardRegister, StandardRegister, i32),
    St(StandardRegister, StandardRegister, i32),
    Sh(StandardRegister, StandardRegister, i32),
    Sw(StandardRegister, StandardRegister, i32),
    BT(StandardRegister, u8, Trit, i32),
    B0(StandardRegister, u8, Trit, i32),
    B1(StandardRegister, u8, Trit, i32),
    BT0(StandardRegister, u8, Trit, i32),
    BT1(StandardRegister, u8, Trit, i32),
    B01(StandardRegister, u8, Trit, i32),
    Jmp(i32),
    Call(i32),
    Jmpr(StandardRegister),
    Callr(StandardRegister),
    Syscall,
    Break,

    // pseudo-instructions
    Sub(StandardRegister, StandardRegister, StandardRegister),
    Mov(StandardRegister, StandardRegister),
    Not(StandardRegister, StandardRegister),
    Li(StandardRegister, i32),
    La(StandardRegister, i32),
    Nop,
}

impl Instruction {
    fn opcode(&self) -> Option<Opcode> {
        match *self {
            Instruction::And(..) => Some(opcodes::AND),
            Instruction::Or(..) => Some(opcodes::OR),
            Instruction::Tmul(..) => Some(opcodes::TMUL),
            Instruction::Tcmp(..) => Some(opcodes::TCMP),
            Instruction::Cmp(..) => Some(opcodes::CMP),
            Instruction::Shf(..) => Some(opcodes::SHF),
            Instruction::Add(..) => Some(opcodes::ADD),
            Instruction::Mul(..) => Some(opcodes::MUL),
            Instruction::Div(..) => Some(opcodes::DIV),
            Instruction::Andi(..) => Some(opcodes::ANDI),
            Instruction::Ori(..) => Some(opcodes::ORI),
            Instruction::Tmuli(..) => Some(opcodes::TMULI),
            Instruction::Tcmpi(..) => Some(opcodes::TCMPI),
            Instruction::Shfi(..) => Some(opcodes::SHFI),
            Instruction::Addi(..) => Some(opcodes::ADDI),
            Instruction::Lui(..) => Some(opcodes::LUI),
            Instruction::Lsr(..) => Some(opcodes::LSR),
            Instruction::Ssr(..) => Some(opcodes::SSR),
            Instruction::Lt(..) => Some(opcodes::LT),
            Instruction::Lh(..) => Some(opcodes::LH),
            Instruction::Lw(..) => Some(opcodes::LW),
            Instruction::St(..) => Some(opcodes::ST),
            Instruction::Sh(..) => Some(opcodes::SH),
            Instruction::Sw(..) => Some(opcodes::SW),
            Instruction::BT(..) => Some(opcodes::BT),
            Instruction::B0(..) => Some(opcodes::B0),
            Instruction::B1(..) => Some(opcodes::B1),
            Instruction::BT0(..) => Some(opcodes::BT0),
            Instruction::BT1(..) => Some(opcodes::BT1),
            Instruction::B01(..) => Some(opcodes::B01),
            Instruction::Jmp(..) => Some(opcodes::JMP),
            Instruction::Call(..) => Some(opcodes::CALL),
            Instruction::Jmpr(..) => Some(opcodes::JMPR),
            Instruction::Callr(..) => Some(opcodes::CALLR),
            Instruction::Syscall => Some(opcodes::SYSCALL),
            Instruction::Break => Some(opcodes::BREAK),
            _ => None,
        }
    }
}
