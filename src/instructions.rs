use trit::Trit;
use registers::*;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
enum Instruction {
    And(StandardRegister, StandardRegister, StandardRegister),
    Or(StandardRegister, StandardRegister, StandardRegister),
    Tmul(StandardRegister, StandardRegister, StandardRegister),
    Tcmp(StandardRegister, StandardRegister, StandardRegister),
    Cmp(StandardRegister, StandardRegister, StandardRegister),
    Shf(StandardRegister, StandardRegister, StandardRegister),
    Add(StandardRegister, StandardRegister, StandardRegister),
    Mul(StandardRegister, StandardRegister),
    Div(StandardRegister, StandardRegister),
    Andi(StandardRegister, StandardRegister, i32),
    Ori(StandardRegister, StandardRegister, i32),
    Tmuli(StandardRegister, StandardRegister, i32),
    Tcmpi(StandardRegister, StandardRegister, i32),
    Shfi(StandardRegister, StandardRegister, i32),
    Addi(StandardRegister, StandardRegister, i32),
    Lui(StandardRegister, i32),
    Lsr(StandardRegister, SystemRegister),
    Ssr(SystemRegister, StandardRegister),
    Lt(StandardRegister, StandardRegister, i32),
    Lh(StandardRegister, StandardRegister, i32),
    Lw(StandardRegister, StandardRegister, i32),
    St(StandardRegister, StandardRegister, i32),
    Sh(StandardRegister, StandardRegister, i32),
    Sw(StandardRegister, StandardRegister, i32),
    BT(StandardRegister, u8, Trit, i32),
    B0(StandardRegister, u8, Trit, i32),
    B1(StandardRegister, u8, Trit, i32),
    BT0(StandardRegister, u8, Trit, i32),
    BT1(StandardRegister, u8, Trit, i32),
    B01(StandardRegister, u8, Trit, i32),
    Jmp(i32),
    Call(i32),
    Jmpr(StandardRegister),
    Callr(StandardRegister),
    Syscall,
    Break,

    // pseudo-instructions
    Sub(StandardRegister, StandardRegister, StandardRegister),
    Mov(StandardRegister, StandardRegister),
    Not(StandardRegister, StandardRegister),
    Li(StandardRegister, i32),
    La(StandardRegister, i32),
    Nop,
}
